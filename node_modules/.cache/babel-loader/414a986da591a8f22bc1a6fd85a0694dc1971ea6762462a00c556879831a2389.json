{"ast":null,"code":"var _jsxFileName = \"C:\\\\projetos\\\\netflixclone\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegar toda a lista\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // pegando o featured\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      //* y = vertical x = horizontal\n      if (window.scrollY > 1000) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      black: blackHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), featuredData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featuredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}, \"X/TsTIBWl4G5VJMk6QGmyiovK0c=\");","map":{"version":3,"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","Header","jsxDEV","_jsxDEV","_s","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","addEventListener","removeEventListener","className","children","black","fileName","_jsxFileName","lineNumber","columnNumber","item","map","key","title"],"sources":["C:/projetos/netflixclone/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegar toda a lista\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // pegando o featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n\n    }\n\n    loadAll();\n  }, []);\n\nuseEffect(() => {\n  const scrollListener = () => {   //* y = vertical x = horizontal\n    if(window.scrollY > 1000) {\n      setBlackHeader(true);\n    } else {\n      setBlackHeader(false);\n    }\n  }\n\n  window.addEventListener('scroll', scrollListener);\n  return () => {\n    window.removeEventListener('scroll', scrollListener);\n  }\n}, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n      \n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          \n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}